{
  "author": "",
  "category": "",
  "description": "Go to the resources tab then scan for JSON files, then use this extension to load the filename only (exclude the file path)",
  "extensionNamespace": "",
  "fullName": "FnFJSONLoader",
  "helpPath": "",
  "iconUrl": "",
  "name": "JsonLoaderForFNF",
  "previewIconUrl": "",
  "shortDescription": "",
  "version": "",
  "tags": [],
  "authorIds": [
    "rotBq28wITdtfsrE7McHQri4k2w2"
  ],
  "dependencies": [],
  "eventsFunctions": [
    {
      "description": "Load FNF json filename ",
      "fullName": "Load FNF json filename ",
      "functionType": "Action",
      "group": "",
      "name": "LoadJSONFile",
      "private": false,
      "sentence": "Load FNF json filename _PARAM1_ to scene structure variable _PARAM2_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "\nasync function fetchJSON(file) {\n  const response = await fetch('./'+file);\n  const data = await response.json();\n  return data;\n}\n\n(async () => {\n    const charting = await fetchJSON(eventsFunctionContext.getArgument(\"FileName\"));\n    console.log({charting});\n    runtimeScene.getVariables().get(eventsFunctionContext.getArgument(\"SceneVariable\")).fromJSObject(charting);\n})();\n",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "FileName",
          "longDescription": "",
          "name": "FileName",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        },
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "SceneVariable",
          "longDescription": "",
          "name": "SceneVariable",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": [],
  "eventsBasedObjects": []
}